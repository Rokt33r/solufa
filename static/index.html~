<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">

<script src="js/jThree.js"></script>
<script>
document.write( '<scr' + 'ipt src="http://' + location.hostname + ':35729/livereload.js?ext=Chrome&amp;extver=2.1.0"></scr' + 'ipt>' );
</script>
<!--<script src="https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js"></script>-->
<script src="js/MSXTransformer.js"></script>
<script src="msxComponents/j3-ObjMtl.js" type="text/msx;harmony=true"></script>
<script src="msxComponents/j3-OrbitVp.js" type="text/msx;harmony=true"></script>
<script src="msxComponents/j3-JyroSync.js" type="text/msx;harmony=true"></script>
<script src="msxComponents/j3-StereoVp.js" type="text/msx;harmony=true"></script>
<script type="text/msx;harmony=true">
j3( function() {

  var App = {
		vm: {
			skyGeo: {
        type: "PlaneBuffer",
        value: [ 1500, 1500 ]
      },
			skyMtl: {
        type: "MeshBasic",
        value: {
          color: "#a0d8ef"
        }
      },
			skyStyle: { posY: 500, rotateX: 1.57 },
			lightPos: { pos: [ 1, 10, 10 ] },
			wallStyles: [],
			wallScale: { scale: 10 },
			partsData: [],
			partsBasePos: { posY: .5 },
			partsPos: [
				[ -1.8, 0, -1.6 ],
				[ -2, 0, -1 ],
				[ -1.4, 0, -1.9 ],
				[ -2.2, 0, 1 ],
				[ -1.6, 0, 1.3 ],
				[ -1.7, 0, 0.2 ],
				[ -1.2, 0, -0.5 ],
				[ -1, 0, 0.6 ],
				[ -1.2, 0, 1.7 ],
				[ -0.9, 0, -1.3 ],
				[ -0.1, 0, -2.2 ],
				[ -0.16, 0, -1.4 ],
				[ -0.5, 0, 0.1 ],
				[ 0.4, 0, -1 ],
				[ -0.2, 0, 1.6 ],
				[ 0, 0, 0.6 ],
				[ 0.5, 0, 1.9 ],
				[ 0.8, 0, -0.1 ],
				[ 0.8, 0, 1.1 ],
				[ 1.2, 0, -1.8 ],
				[ 1.8, 0, -1.1 ],
				[ 1.5, 0, -0.1 ],
				[ 1.3, 0, 1.4 ],
				[ 2, 0, 0.8 ],
				[ 0, 0.5, 0 ]
			],
			camStyle: {pos: [ 0, 20, 3 ], lookAtY: 20 },

			arrowMtl: {
				type: "Sprite",
				value: {
					map: {
						type: "Image",
						src: "./img/arrow.png"
					}
				}
			},
			arrowMtl2: {
				type: "Sprite",
				value: {
					map: {
						type: "Image",
						src: "./img/arrow2.png"
					}
				}
			},
			arrowStyle: { pos: [ 0, -1, -10 ] },
			init: function() {
				for ( var i = 0; i < 6; i++ ) {
					this.wallStyles.push({
						posY: -i * 7
					});
				}

				for ( var i = 0; i < 25; i++ ) {
					this.partsData.push({
						src: "model/obj/stage2/hahen" + i + ".text",
						style: { pos: this.partsPos[ i ] }
					});
				}
			},
			turned: false,
			falling: false,
			pickSky: function( elem ) {
				var n = 0;
				var fn = function() {
					if ( ++n % 30 === 0 ) {
						if ( elem.pickElementByRatio.apply( elem, !this.isStereo ? [ .5, .5 ] : this.stereoType === "landscape" ? [ .25, .5 ] : [ .5, .25 ] ).id === "sky" ) {
							j3.update( fn, false );
							this.pickBlock( elem );
							elem = n = null;
							this.turned = true;
							m.redraw();
						}
					}
				}.bind( this );

				j3.update( fn );
			},
			pickBlock: function( elem ) {
				var n = 0;

				var fn = function() {

					if ( ++n % 30 === 0 ) {
						if ( elem.pickElementByRatio.apply( elem, !this.isStereo ? [ .5, .5 ] : this.stereoType === "landscape" ? [ .25, .5 ] : [ .5, .25 ] ).className === "block" ) {
							j3.update( fn, false );
							elem = n = null;
							this.falling = true;
							this.falldown();
							m.redraw();
						}
					}
				}.bind( this );

				j3.update( fn );
			},
			facePos: [
				{ pos: [ -6, 15, -6 ], lookAtY: 20 },
				{ pos: [ 6, 15, 6 ], lookAtY: 20 },
				{ pos: [ 6, 15, -6 ], lookAtY: 20 },
				{ pos: [ -6, 15, 6 ], lookAtY: 20 }
			],
			faceStyle: { scale: 15, rotateX: Math.PI * 7 / 8 },
			falldown: function() {
				var cam = j3.document.getElementById( "camWrap" );
				var blocks = j3.document.getElementById( "blocks" );
				var camY = cam.style.posY;
				var blocksY = blocks.style.posY;
				var t = 0;

				function update( delta ) {
					t += delta * .0015;
					var height = .5 * - 9.82 * Math.pow( t, 2 );
					if ( height > -350 ) {
						blocks.style.posY = blocksY + height / 10;
						cam.style.posY = camY + height;
					} else {
						j3.update( update, false );
					}
				}

				j3.update( update );

				blocks.childNodes.forEach( function( child ) {
					setTimeout( function() {
						var pos = this.style.pos;
						var t = 0;
						var maxT = 4600;
						var rotateResult = [ Math.random() * Math.PI / 2, Math.random() * Math.PI / 2, Math.random() * Math.PI / 2 ];

						var update = function( delta ) {
							t += delta;

							if ( t < maxT ) {
								this.style.rotate = [ rotateResult[ 0 ] * t / maxT, rotateResult[ 1 ] * t / maxT, rotateResult[ 2 ] * t / maxT ];
								this.style.pos = [ ( 1 + t / maxT ) * pos[ 0 ], 0, ( 1 + t / maxT ) * pos[ 2 ] ];
							} else {
								j3.update( update, false );
							}
						}.bind( this );

						j3.update( update );
					}.bind( child ), 500 );
				});
		  },
      stereoType: null,
      stereoChange: function( type ) {
        this.stereoType = type;
      },
      isStereo: true
		},
    controller: function() {
			App.vm.init();
    },
    view: function() {
      var vm = App.vm;

      return <scene>
				<mesh id="sky" geo={ vm.skyGeo } mtl={ vm.skyMtl } style={ vm.skyStyle }/>

				<obj style={vm.wallScale}>
					{ vm.wallStyles.map( style => <ObjMtl src="model/obj/stage2/map_web_0422a.text" style={style}/> )}
					<ObjMtl src="model/obj/stage2/map_web_0422b.text"/>
					<ObjMtl src="model/obj/stage2/map_web_0422c.text"/>

					<obj id="blocks" style={ vm.partsBasePos }>
						{ vm.partsData.map( data => <ObjMtl class="block" src={ data.src } style={ data.style }/>) }
					</obj>

					<obj display={ vm.turned }>
						{ vm.facePos.map( pos => <obj class="face" style={ pos }>
							<ObjMtl src="model/obj/kao/kao3.text" style={ vm.faceStyle }/>
						</obj> ) }
					</obj>
				</obj>
				<obj id="camWrap" style={ vm.camStyle }>
					<JyroSync>
						<cam id="cam">
							<sprite display={ !vm.falling } mtl={ vm.turned ? vm.arrowMtl2 : vm.arrowMtl } style={ vm.arrowStyle }/>
						</cam>
					</JyroSync>
				</obj>
        <light type="Dir" style={ vm.lightPos }/>
        <light type="Amb" />
      </scene>;
    }
  };


  m.mount( j3.document.body, App );
  m.render( j3.document.head, <rdr config={App.vm.pickSky.bind( App.vm )} init={{ frame: "#jthree", antialias: true, preserveDrawingBuffer: false }}>
		<StereoVp cam="#cam" separation={.3} onchange={ App.vm.stereoChange.bind( App.vm )}/>
	</rdr> );
});
</script>

<style>
#jthree {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}
</style>
<div id="jthree"></div>
